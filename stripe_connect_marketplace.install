<?php

/**
 * @file
 * Install, update and uninstall functions for the Stripe Connect Marketplace module.
 */

use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;
use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_requirements().
 */
function stripe_connect_marketplace_requirements($phase) {
  $requirements = [];

  if ($phase == 'install' || $phase == 'runtime') {
    
    $required_modules = [
      'commerce' => 'Commerce',
      'commerce_payment' => 'Commerce Payment',
      'commerce_order' => 'Commerce Order',
      'commerce_stripe' => 'Commerce Stripe',
      'commerce_store' => 'Commerce Store',
      'commerce_product' => 'Commerce Product',
      'commerce_cart' => 'Commerce Cart',
      'commerce_checkout' => 'Commerce Checkout',
      'commerce_log' => 'Commerce Log',
      'commerce_tax' => 'Commerce Tax',
    ];

    // Check each required module
    foreach ($required_modules as $module => $name) {
      if (!\Drupal::moduleHandler()->moduleExists($module)) {
        $requirements['stripe_connect_marketplace_' . $module] = [
          'title' => $name,
          'description' => t('@module is required for Stripe Connect Marketplace to function properly.', ['@module' => $name]),
          'severity' => REQUIREMENT_ERROR,
        ];
      }
    }

    // Check for required PHP extensions.
    $required_extensions = ['json', 'curl'];
    foreach ($required_extensions as $extension) {
      if (!extension_loaded($extension)) {
        $requirements['stripe_connect_marketplace_' . $extension] = [
          'title' => t('PHP @extension extension', ['@extension' => $extension]),
          'description' => t('Stripe Connect Marketplace requires the PHP @extension extension to be installed.', ['@extension' => $extension]),
          'severity' => REQUIREMENT_ERROR,
        ];
      }
    }

    // Check PHP version, Stripe requires PHP 7.4+.
    if (version_compare(PHP_VERSION, '7.4.0', '<')) {
      $requirements['stripe_connect_marketplace_php_version'] = [
        'title' => t('PHP version'),
        'description' => t('Stripe Connect Marketplace requires PHP 7.4.0 or higher. Your current PHP version is @version.', ['@version' => PHP_VERSION]),
        'severity' => REQUIREMENT_ERROR,
      ];
    }

    // Check if Stripe API credentials are configured at runtime.
    if ($phase == 'runtime') {
      // Check Commerce Stripe settings.
      $config = \Drupal::config('commerce_stripe.settings');
      if (empty($config->get('secret_key')) || empty($config->get('publishable_key'))) {
        $requirements['stripe_connect_marketplace_api_keys'] = [
          'title' => t('Stripe API credentials'),
          'description' => t('The Stripe API credentials are not configured. <a href=":url">Configure Commerce Stripe settings</a>.', [':url' => '/admin/commerce/config/stripe']),
          'severity' => REQUIREMENT_WARNING,
        ];
      }

      // Check Stripe Connect specific settings.
      $connect_config = \Drupal::config('stripe_connect_marketplace.settings');
      if (empty($connect_config->get('stripe_connect.webhook_secret'))) {
        $requirements['stripe_connect_marketplace_webhook'] = [
          'title' => t('Stripe Connect webhook'),
          'description' => t('The Stripe Connect webhook secret is not configured. <a href=":url">Configure Stripe Connect settings</a>.', [':url' => '/admin/commerce/config/stripe-connect']),
          'severity' => REQUIREMENT_WARNING,
        ];
      }
    }
  }

  return $requirements;
}

/**
 * Implements hook_install().
 */
function stripe_connect_marketplace_install() {
  // Create the Stripe account ID field for users.
  _stripe_connect_marketplace_create_account_id_field();
  // Create the vendor status field for users.
  _stripe_connect_marketplace_create_vendor_status_field();
  // Add the vendor role.
  _stripe_connect_marketplace_add_vendor_role();
}

/**
 * Implements hook_uninstall().
 */
function stripe_connect_marketplace_uninstall() {
  // Delete the Stripe account ID field.
  $field_storage = FieldStorageConfig::loadByName('user', 'field_stripe_account_id');
  if ($field_storage) {
    $field_storage->delete();
  }
  
  // Delete the vendor status field.
  $field_storage = FieldStorageConfig::loadByName('user', 'field_vendor_status');
  if ($field_storage) {
    $field_storage->delete();
  }
  
  // Remove configurations.
  \Drupal::configFactory()->getEditable('stripe_connect_marketplace.settings')->delete();
}

/**
 * Creates the Stripe account ID field for users.
 */
function _stripe_connect_marketplace_create_account_id_field() {
  // Check if the field already exists.
  $field_storage = FieldStorageConfig::loadByName('user', 'field_stripe_account_id');
  if (!$field_storage) {
    // Create the field storage.
    $field_storage = FieldStorageConfig::create([
      'field_name' => 'field_stripe_account_id',
      'entity_type' => 'user',
      'type' => 'string',
      'settings' => [
        'max_length' => 255,
        'is_ascii' => TRUE,
        'case_sensitive' => FALSE,
      ],
      'cardinality' => 1,
      'locked' => FALSE,
      'module' => 'stripe_connect_marketplace',
    ]);
    $field_storage->save();
    
    // Create the field instance.
    $field = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => 'user',
      'label' => t('Stripe Account ID'),
      'description' => t('The Stripe Connect account ID for this vendor.'),
      'required' => FALSE,
      'settings' => [],
    ]);
    $field->save();
    
    // Set the form display.
    $form_display = \Drupal::service('entity_display.repository')->getFormDisplay('user', 'user', 'default');
    $form_display->setComponent('field_stripe_account_id', [
      'type' => 'string_textfield',
      'weight' => 10,
      'settings' => [
        'size' => 60,
        'placeholder' => '',
      ],
    ]);
    $form_display->save();
    
    // Set the view display.
    $view_display = \Drupal::service('entity_display.repository')->getViewDisplay('user', 'user', 'default');
    $view_display->setComponent('field_stripe_account_id', [
      'type' => 'string',
      'weight' => 10,
      'label' => 'above',
      'settings' => [
        'link_to_entity' => FALSE,
      ],
    ]);
    $view_display->save();
  }
}

/**
 * Creates the vendor status field for users.
 */
function _stripe_connect_marketplace_create_vendor_status_field() {
  // Check if the field already exists.
  $field_storage = FieldStorageConfig::loadByName('user', 'field_vendor_status');
  if (!$field_storage) {
    // Create the field storage.
    $field_storage = FieldStorageConfig::create([
      'field_name' => 'field_vendor_status',
      'entity_type' => 'user',
      'type' => 'list_string',
      'settings' => [
        'allowed_values' => [
          'pending' => 'Pending',
          'active' => 'Active',
          'inactive' => 'Inactive',
          'suspended' => 'Suspended',
          'deleted' => 'Deleted', // Add the deleted status
        ],
      ],
      'cardinality' => 1,
      'locked' => FALSE,
      'module' => 'stripe_connect_marketplace',
    ]);
    $field_storage->save();
    
    // Create the field instance.
    $field = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => 'user',
      'label' => t('Vendor Status'),
      'description' => t('The status of this vendor account.'),
      'required' => FALSE,
      'default_value' => [
        [
          'value' => 'pending',
        ],
      ],
    ]);
    $field->save();
    
    // Set the form display.
    $form_display = \Drupal::service('entity_display.repository')->getFormDisplay('user', 'user', 'default');
    $form_display->setComponent('field_vendor_status', [
      'type' => 'options_select',
      'weight' => 11,
    ]);
    $form_display->save();
    
    // Set the view display.
    $view_display = \Drupal::service('entity_display.repository')->getViewDisplay('user', 'user', 'default');
    $view_display->setComponent('field_vendor_status', [
      'type' => 'list_default',
      'weight' => 11,
      'label' => 'above',
    ]);
    $view_display->save();
  }
  else {
    // Field exists, check if we need to add the 'deleted' status
    $allowed_values = $field_storage->getSetting('allowed_values');
    if (!isset($allowed_values['deleted'])) {
      $allowed_values['deleted'] = 'Deleted';
      $field_storage->setSetting('allowed_values', $allowed_values);
      $field_storage->save();
      
      \Drupal::logger('stripe_connect_marketplace')->notice('Added "deleted" status to vendor status field.');
    }
  }
}

/**
 * Update vendor status field to add 'deleted' status.
 */
function stripe_connect_marketplace_update_8002() {
  $field_storage = FieldStorageConfig::loadByName('user', 'field_vendor_status');
  if ($field_storage) {
    $allowed_values = $field_storage->getSetting('allowed_values');
    if (!isset($allowed_values['deleted'])) {
      $allowed_values['deleted'] = 'Deleted';
      $field_storage->setSetting('allowed_values', $allowed_values);
      $field_storage->save();
      
      return t('Added "deleted" status to vendor status field.');
    }
    else {
      return t('Vendor status field already includes "deleted" status.');
    }
  }
  else {
    return t('Vendor status field not found.');
  }
}


/**
 * Creates the vendor role with required permissions.
 */
function _stripe_connect_marketplace_create_vendor_role() {
  // Check if the role already exists
  $roles = \Drupal::entityTypeManager()->getStorage('user_role')->loadMultiple();
  if (!isset($roles['vendor'])) {
    $role = \Drupal::entityTypeManager()->getStorage('user_role')->create([
      'id' => 'vendor',
      'label' => 'Vendor',
      'weight' => 3,
    ]);
    $role->save();
    
    // Store permissions
    $store_permissions = [
      'view own commerce_store',
      'create commerce_store',
      'update own commerce_store',
      'delete own commerce_store',
    ];
    
    // Product permissions
    $product_permissions = [
      'view own commerce_product',
      'create commerce_product',
      'update own commerce_product',
      'delete own commerce_product',
    ];
    
    // Add product type specific permissions
    $product_types = \Drupal::entityTypeManager()
      ->getStorage('commerce_product_type')
      ->loadMultiple();
    
    foreach ($product_types as $product_type) {
      $product_permissions[] = 'create ' . $product_type->id() . ' commerce_product';
    }
    
    // Order permissions
    $order_permissions = [
      'view own commerce_order',
      'update own commerce_order',
    ];
    
    // Taxonomy and other permissions
    $other_permissions = [
      'access content',
      'view commerce_product',
      'access checkout',
      'view commerce_product variation',
      'view stripe connect dashboard',
      'register as stripe connect vendor',
    ];
    
    // All permissions combined
    $vendor_permissions = array_merge(
      $store_permissions,
      $product_permissions,
      $order_permissions,
      $other_permissions
    );
    
    // Grant permissions
    user_role_grant_permissions($role->id(), $vendor_permissions);
    
    \Drupal::logger('stripe_connect_marketplace')->notice('Created vendor role with permissions.');
  }
}

/**
 * Adds the vendor role.
 */
function _stripe_connect_marketplace_add_vendor_role() {
  $roles = \Drupal::entityTypeManager()->getStorage('user_role')->loadMultiple();
  if (!isset($roles['vendor'])) {
    $role = \Drupal::entityTypeManager()->getStorage('user_role')->create([
      'id' => 'vendor',
      'label' => 'Vendor',
      'weight' => 3,
    ]);
    $role->save();
    
    // Base permissions
    $permissions = ['access content'];
    
    // Add Commerce Payment permissions if they exist
    $permission_handler = \Drupal::service('user.permissions');
    $all_permissions = $permission_handler->getPermissions();
    $commerce_permissions = [
      'view own commerce_payment_method',
      'create commerce_payment_method',
      'update own commerce_payment_method',
      'delete own commerce_payment_method',
    ];
    
    foreach ($commerce_permissions as $permission) {
      if (isset($all_permissions[$permission])) {
        $permissions[] = $permission;
      }
    }
    
    // Grant permissions
    user_role_grant_permissions($role->id(), $permissions);
  }
}

/**
 * Implements hook_schema().
 */
function stripe_connect_marketplace_schema() {
  $schema = [];
  
  // In a real-world scenario, you might want to create custom tables
  // for tracking specific vendor-related data or transaction history.
  // This is just a placeholder for demonstration purposes.
  
  $schema['stripe_connect_transaction_log'] = [
    'description' => 'Stores logs of Stripe Connect transactions.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary Key: Unique transaction log ID.',
      ],
      'stripe_transaction_id' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The Stripe transaction ID.',
      ],
      'vendor_id' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The vendor user ID.',
      ],
      'order_id' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
        'description' => 'The commerce order ID if applicable.',
      ],
      'amount' => [
        'type' => 'numeric',
        'precision' => 10,
        'scale' => 2,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The transaction amount.',
      ],
      'fee_amount' => [
        'type' => 'numeric',
        'precision' => 10,
        'scale' => 2,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The platform fee amount.',
      ],
      'currency' => [
        'type' => 'varchar',
        'length' => 3,
        'not null' => TRUE,
        'default' => 'USD',
        'description' => 'The currency code.',
      ],
      'type' => [
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The transaction type (payment, refund, payout, etc.).',
      ],
      'status' => [
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The transaction status.',
      ],
      'created' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The Unix timestamp when the transaction was created.',
      ],
      'data' => [
        'type' => 'blob',
        'size' => 'big',
        'not null' => FALSE,
        'description' => 'Serialized data containing additional transaction details.',
      ],
    ],
    'primary key' => ['id'],
    'indexes' => [
      'stripe_transaction_id' => ['stripe_transaction_id'],
      'vendor_id' => ['vendor_id'],
      'order_id' => ['order_id'],
      'created' => ['created'],
    ],
  ];
  
  return $schema;
}

/**
 * Ensures the schema is properly registered.
 */
function stripe_connect_marketplace_update_8001() {
  return t('Schema registration verified for Stripe Connect Marketplace.');
}

/**
 * Create vendor role and add permissions for Marketplace.
 */
function stripe_connect_marketplace_update_9003() {
  _stripe_connect_marketplace_create_vendor_role();
  return t('Created vendor role with Commerce permissions.');
}
