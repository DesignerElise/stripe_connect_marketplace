<?php

/**
 * @file
 * Contains stripe_connect_marketplace.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_help().
 */
function stripe_connect_marketplace_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.stripe_connect_marketplace':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Stripe Connect Marketplace module integrates Drupal Commerce with Stripe Connect to create a multi-vendor marketplace.') . '</p>';
      $output .= '<p>' . t('Configuration:') . '</p>';
      $output .= '<ul>';
      $output .= '<li>' . t('<a href=":settings">Configure Stripe Connect settings</a>', [':settings' => Url::fromRoute('stripe_connect_marketplace.settings')->toString()]) . '</li>';
      $output .= '<li>' . t('<a href=":dashboard">View Stripe Connect dashboard</a>', [':dashboard' => Url::fromRoute('stripe_connect_marketplace.admin_dashboard')->toString()]) . '</li>';
      $output .= '</ul>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function stripe_connect_marketplace_theme($existing, $type, $theme, $path) {
  return [
    'stripe_connect_admin_dashboard' => [
      'variables' => [
        'vendors' => NULL,
        'balance' => NULL,
        'payouts' => NULL,
        'environment' => NULL,
      ],
      'template' => 'stripe-connect-admin-dashboard',
    ],
    'stripe_connect_onboarding_complete' => [
      'variables' => [
        'account' => NULL,
        'user' => NULL,
      ],
      'template' => 'stripe-connect-onboarding-complete',
    ],
    'stripe_connect_vendor_dashboard' => [
      'variables' => [
        'account' => NULL,
        'balance' => NULL,
        'payouts' => NULL,
        'user' => NULL,
      ],
      'template' => 'stripe-connect-vendor-dashboard',
    ],
    'stripe_connect_vendor_details' => [
      'variables' => [
        'vendor' => [],
        'account' => [],
        'balance' => [],
        'payouts' => [],
      ],
      'template' => 'stripe-connect-vendor-details',
    ],
    'stripe_connect_vendor_payouts' => [
      'variables' => [
        'vendor' => [],
        'payouts' => [],
      ],
      'template' => 'stripe-connect-vendor-payouts',
    ],
    'stripe_connect_vendor_terms' => [
      'variables' => [
        'terms' => [],
      ],
      'template' => 'stripe-connect-vendor-terms',
    ],
  ];
}

/**
 * Implements hook_entity_operation().
 */
function stripe_connect_marketplace_entity_operation(EntityInterface $entity) {
  $operations = [];
  
  // Add operations for user entities that are vendors
  if ($entity->getEntityTypeId() === 'user' && 
      $entity->hasField('field_stripe_account_id') && 
      !$entity->get('field_stripe_account_id')->isEmpty()) {
    
    $operations['stripe_connect'] = [
      'title' => t('Stripe Connect'),
      'weight' => 50,
      'url' => Url::fromRoute('stripe_connect_marketplace.view_vendor', ['user' => $entity->id()]),
    ];
  }
  
  return $operations;
}

/**
 * Implements hook_toolbar().
 */
function stripe_connect_marketplace_toolbar() {
  $items = [];
  
  // Check for vendor role if this is the front-end
  $current_user = \Drupal::currentUser();
  if ($current_user->hasPermission('view stripe connect dashboard')) {
    $items['stripe_connect_vendor'] = [
      '#type' => 'toolbar_item',
      '#weight' => 999,
      'tab' => [
        '#type' => 'link',
        '#title' => t('Vendor Dashboard'),
        '#url' => Url::fromRoute('stripe_connect_marketplace.vendor_dashboard'),
        '#attributes' => [
          'title' => t('Stripe Connect Vendor Dashboard'),
          'class' => ['toolbar-icon', 'toolbar-icon-stripe-connect-vendor'],
        ],
      ],
    ];
  }
  
  // Check for admin role
  if ($current_user->hasPermission('access stripe connect admin')) {
    $items['stripe_connect_admin'] = [
      '#type' => 'toolbar_item',
      '#weight' => 999,
      'tab' => [
        '#type' => 'link',
        '#title' => t('Stripe Connect Admin'),
        '#url' => Url::fromRoute('stripe_connect_marketplace.admin_dashboard'),
        '#attributes' => [
          'title' => t('Stripe Connect Admin Dashboard'),
          'class' => ['toolbar-icon', 'toolbar-icon-stripe-connect-admin'],
        ],
      ],
    ];
  }
  
  return $items;
}

/**
 * Implements hook_cron().
 */
function stripe_connect_marketplace_cron() {
  // Verify API keys every 6 hours
  $api_key_interval = 21600; // 6 hours
  $last_key_verification = \Drupal::state()->get('stripe_connect_marketplace.last_api_verification', 0);
  
  if (time() - $last_key_verification >= $api_key_interval) {
    try {
      // Verify the API keys
      $verification_service = \Drupal::service('stripe_connect_marketplace.api_key_verification');
      $verification_service->verifyApiKeys();
      
      // Update last verification time
      \Drupal::state()->set('stripe_connect_marketplace.last_api_verification', time());
    }
    catch (\Exception $e) {
      \Drupal::logger('stripe_connect_marketplace')->error('Error during API key verification: @message', [
        '@message' => $e->getMessage(),
      ]);
    }
  }
  
  // Verify connected accounts every 12 hours (process 20 at a time)
  $account_interval = 43200; // 12 hours
  $last_account_verification = \Drupal::state()->get('stripe_connect_marketplace.last_account_verification', 0);
  
  if (time() - $last_account_verification >= $account_interval) {
    try {
      // Verify connected accounts
      $account_service = \Drupal::service('stripe_connect_marketplace.account_verification');
      $stats = $account_service->verifyVendorAccounts(20);
      
      // Log the results
      if ($stats['checked'] > 0) {
        \Drupal::logger('stripe_connect_marketplace')->info('Verified @checked vendor accounts: @updated updated, @deleted marked as deleted', [
          '@checked' => $stats['checked'],
          '@updated' => $stats['updated'],
          '@deleted' => $stats['deleted'],
        ]);
      }
      
      // Update last verification time
      \Drupal::state()->set('stripe_connect_marketplace.last_account_verification', time());
    }
    catch (\Exception $e) {
      \Drupal::logger('stripe_connect_marketplace')->error('Error during account verification: @message', [
        '@message' => $e->getMessage(),
      ]);
    }
  }
  
  // Process failed operations queue
  $queue_processor_interval = 1800; // 30 minutes
  $last_queue_processing = \Drupal::state()->get('stripe_connect_marketplace.last_queue_processing', 0);
  
  if (time() - $last_queue_processing >= $queue_processor_interval) {
    try {
      // Process the failed operations queue
      $failed_operations = \Drupal::service('stripe_connect_marketplace.failed_operations');
      $stats = $failed_operations->processQueue(10);
      
      // Log the results if anything was processed
      if ($stats['processed'] > 0) {
        \Drupal::logger('stripe_connect_marketplace')->info('Processed @processed failed operations: @succeeded succeeded, @requeued requeued, @dropped dropped', [
          '@processed' => $stats['processed'],
          '@succeeded' => $stats['succeeded'],
          '@requeued' => $stats['requeued'],
          '@dropped' => $stats['dropped'],
        ]);
      }
      
      // Update last processing time
      \Drupal::state()->set('stripe_connect_marketplace.last_queue_processing', time());
    }
    catch (\Exception $e) {
      \Drupal::logger('stripe_connect_marketplace')->error('Error processing failed operations queue: @message', [
        '@message' => $e->getMessage(),
      ]);
    }
  }
}

/**
 * Implements hook_mail().
 */
function stripe_connect_marketplace_mail($key, &$message, $params) {
  switch ($key) {
    case 'api_key_failure':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['message'];
      break;
      
    case 'account_deleted':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['message'];
      break;
      
    case 'vendor_status_change':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['message'];
      break;
  }
}
