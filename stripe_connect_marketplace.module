<?php

/**
 * @file
 * Contains stripe_connect_marketplace.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\stripe_connect_marketplace\Utility\SafeLogging;

/**
 * Implements hook_help().
 */
function stripe_connect_marketplace_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.stripe_connect_marketplace':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Stripe Connect Marketplace module integrates Drupal Commerce with Stripe Connect to create a multi-vendor marketplace.') . '</p>';
      $output .= '<p>' . t('Configuration:') . '</p>';
      $output .= '<ul>';
      $output .= '<li>' . t('<a href=":settings">Configure Stripe Connect settings</a>', [':settings' => Url::fromRoute('stripe_connect_marketplace.settings')->toString()]) . '</li>';
      $output .= '<li>' . t('<a href=":dashboard">View Stripe Connect dashboard</a>', [':dashboard' => Url::fromRoute('stripe_connect_marketplace.admin_dashboard')->toString()]) . '</li>';
      $output .= '</ul>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function stripe_connect_marketplace_theme($existing, $type, $theme, $path) {
  return [
    'stripe_connect_admin_dashboard' => [
      'variables' => [
        'vendors' => NULL,
        'balance' => NULL,
        'payouts' => NULL,
        'environment' => NULL,
      ],
      'template' => 'stripe-connect-admin-dashboard',
    ],
    'stripe_connect_onboarding_complete' => [
      'variables' => [
        'account' => NULL,
        'user' => NULL,
      ],
      'template' => 'stripe-connect-onboarding-complete',
    ],
    'stripe_connect_vendor_dashboard' => [
      'variables' => [
        'account' => NULL,
        'balance' => NULL,
        'payouts' => NULL,
        'user' => NULL,
      ],
      'template' => 'stripe-connect-vendor-dashboard',
    ],
    'stripe_connect_vendor_details' => [
      'variables' => [
        'vendor' => [],
        'account' => [],
        'balance' => [],
        'payouts' => [],
      ],
      'template' => 'stripe-connect-vendor-details',
    ],
    'stripe_connect_vendor_payouts' => [
      'variables' => [
        'vendor' => [],
        'payouts' => [],
      ],
      'template' => 'stripe-connect-vendor-payouts',
    ],
    'stripe_connect_vendor_terms' => [
      'variables' => [
        'terms' => [],
      ],
      'template' => 'stripe-connect-vendor-terms',
    ],
    'vendor_action_buttons' => [
      'variables' => [
        'buttons' => [],
      ],
      'template' => 'vendor-action-buttons',
    ],
  ];
}

/**
 * Implements hook_entity_operation().
 */
function stripe_connect_marketplace_entity_operation(EntityInterface $entity) {
  $operations = [];
  
  // Add operations for user entities
  if ($entity->getEntityTypeId() === 'user') {
    $account = \Drupal::currentUser();
    
    // Add "Make vendor" link for users without vendor role
    if ($account->hasPermission('administer stripe connect') && 
        !$entity->hasRole('vendor') && 
        $entity->id() != 1) { // Skip anonymous user
      
      $operations['make_vendor'] = [
        'title' => t('Make vendor'),
        'weight' => 50,
        'url' => Url::fromRoute('stripe_connect_marketplace.make_vendor', ['user' => $entity->id()]),
      ];
    }
    
    // Add operations for user entities that are vendors with Stripe accounts
    if ($entity->hasField('field_stripe_account_id') && 
        !$entity->get('field_stripe_account_id')->isEmpty()) {
      
      $operations['stripe_connect'] = [
        'title' => t('Stripe Connect'),
        'weight' => 51,
        'url' => Url::fromRoute('stripe_connect_marketplace.view_vendor', ['user' => $entity->id()]),
      ];
    }
  }
  
  return $operations;
}

/**
 * Implements hook_entity_access().
 */
function stripe_connect_marketplace_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  // Only apply vendor restrictions to appropriate entity types
  if ($account->hasRole('vendor')) {
    $vendor_access = \Drupal::service('stripe_connect_marketplace.vendor_access');

    if ($entity->getEntityTypeId() === 'commerce_store') {
      return $vendor_access->storeAccess($entity, $operation, $account);
    }
    elseif ($entity->getEntityTypeId() === 'commerce_product') {
      return $vendor_access->productAccess($entity, $operation, $account);
    }
    elseif ($entity->getEntityTypeId() === 'commerce_order') {
      return $vendor_access->orderAccess($entity, $operation, $account);
    }
  }
  
  return AccessResult::neutral();
}

/**
 * Implements hook_commerce_store_presave().
 */
function stripe_connect_marketplace_commerce_store_presave(EntityInterface $entity) {
  // For new stores created by vendors, set current user as owner if not already set
  if ($entity->isNew() && empty($entity->getOwnerId())) {
    $current_user = \Drupal::currentUser();
    if ($current_user->hasRole('vendor')) {
      $entity->setOwnerId($current_user->id());
      
      \Drupal::logger('stripe_connect_marketplace')->notice('Automatically set vendor @uid as owner of new store @sid', [
        '@uid' => $current_user->id(),
        '@sid' => $entity->id() ?? 'new',
      ]);
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function stripe_connect_marketplace_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $current_user = \Drupal::currentUser();
  
  // Only modify forms for vendors
  if (!$current_user->hasRole('vendor')) {
    return;
  }
  
  // Add CSRF protection to all forms we modify
  $form['#token'] = TRUE;

  // Add vendor context to Commerce forms
  $commerce_forms = [
    'commerce_payment_gateway_form',
    'commerce_tax_type_form',
    'commerce_shipping_method_form',
    'commerce_promotion_form',
    'commerce_product_variation_type_form',
  ];
  
  if (in_array($form_id, $commerce_forms)) {
    // Get form object and ensure it has an entity
    $form_object = $form_state->getFormObject();
    
    // Check if form object exists and has getEntity method
    if (!$form_object || !method_exists($form_object, 'getEntity')) {
      SafeLogging::log(\Drupal::logger('stripe_connect_marketplace'), 
        'Form @form_id does not have a valid entity form object', [
        '@form_id' => $form_id,
      ], 'warning');
      return;
    }
    
    $form_entity = $form_object->getEntity();
    if (!$form_entity) {
      SafeLogging::log(\Drupal::logger('stripe_connect_marketplace'), 
        'Form entity not found for @form_id', [
        '@form_id' => $form_id,
      ], 'warning');
      return;
    }
    
    // Get request parameters to check for vendor context
    $vendor_context = \Drupal::request()->query->get('vendor_context') === 'true';
    $store_id = \Drupal::request()->query->get('store_id');
    
    if ($vendor_context && $store_id) {
      // Load the store
      $store = \Drupal::entityTypeManager()->getStorage('commerce_store')->load($store_id);
      
      // Only proceed if this is the vendor's store
      if ($store && $store->getOwnerId() == $current_user->id()) {
        // Add vendor context to the form
        $form['vendor_context'] = [
          '#type' => 'value',
          '#value' => TRUE,
        ];
        
        $form['vendor_store_id'] = [
          '#type' => 'value',
          '#value' => $store_id,
        ];
        
        // Add vendor context display
        $form['vendor_context_display'] = [
          '#type' => 'container',
          '#weight' => -100,
          '#attributes' => ['class' => ['vendor-context-message']],
          'message' => [
            '#markup' => t('You are configuring this setting for your store: <strong>@store</strong>', 
              ['@store' => $store->label()]),
          ],
        ];
        
        // Add a cancel button that returns to the vendor store settings page
        $form['actions']['cancel'] = [
          '#type' => 'link',
          '#title' => t('Cancel'),
          '#url' => \Drupal\Core\Url::fromRoute('stripe_connect_marketplace.vendor_store_settings', 
            ['store_id' => $store_id]),
          '#attributes' => ['class' => ['button']],
          '#weight' => 100,
        ];
        
        // Modify the form based on entity type
        switch (get_class($form_entity)) {
          case 'Drupal\commerce_payment\Entity\PaymentGateway':
            _stripe_connect_marketplace_modify_payment_gateway_form($form, $form_state, $store);
            break;
            
          case 'Drupal\commerce_tax\Entity\TaxType':
            _stripe_connect_marketplace_modify_tax_type_form($form, $form_state, $store);
            break;
            
          case 'Drupal\commerce_shipping\Entity\ShippingMethod':
            _stripe_connect_marketplace_modify_shipping_method_form($form, $form_state, $store);
            break;
            
          case 'Drupal\commerce_promotion\Entity\Promotion':
            _stripe_connect_marketplace_modify_promotion_form($form, $form_state, $store);
            break;
        }
      }
    }
  }

  // Handle Commerce product and product variation forms (as a separate case)
  if (strpos($form_id, 'commerce_product_') === 0 || strpos($form_id, 'commerce_product_variation_') === 0) {
    // Get form object and ensure it has an entity
    $form_object = $form_state->getFormObject();
    
    // Check if form object exists and has getEntity method
    if (!$form_object || !method_exists($form_object, 'getEntity')) {
      return;
    }
    
    _stripe_connect_marketplace_modify_product_form($form, $form_state, $current_user->id());
  }
}

/**
 * Modifies payment gateway forms for vendors.
 */
function _stripe_connect_marketplace_modify_payment_gateway_form(&$form, $form_state, $store) {
  // Simplify the form for vendors
  
  // Restrict store selection to only the vendor's store
  if (isset($form['stores'])) {
    $form['stores']['#access'] = FALSE;
    $form['stores']['#default_value'] = [$store->id()];
  }
  
  // Hide advanced settings
  if (isset($form['configuration']['panes'])) {
    $form['configuration']['panes']['#access'] = FALSE;
  }
  
  // Add explanation text
  $form['vendor_payment_message'] = [
    '#type' => 'markup',
    '#markup' => t('<p>This payment method will be available for customers purchasing from your store.</p>'),
    '#weight' => -90,
  ];
}

/**
 * Modifies tax type forms for vendors.
 */
function _stripe_connect_marketplace_modify_tax_type_form(&$form, $form_state, $store) {
  // Simplify tax configuration for vendors
  
  // Hide complex tax settings
  if (isset($form['configuration']['strategies'])) {
    $form['configuration']['strategies']['#access'] = FALSE;
  }
  
  // Add explanation text
  $form['vendor_tax_message'] = [
    '#type' => 'markup',
    '#markup' => t('<p>This tax configuration will apply to products in your store.</p>'),
    '#weight' => -90,
  ];
}

/**
 * Modifies shipping method forms for vendors.
 */
function _stripe_connect_marketplace_modify_shipping_method_form(&$form, $form_state, $store) {
  // Restrict store selection to only the vendor's store
  if (isset($form['stores'])) {
    $form['stores']['#access'] = FALSE;
    $form['stores']['#default_value'] = [$store->id()];
  }
  
  // Add explanation text
  $form['vendor_shipping_message'] = [
    '#type' => 'markup',
    '#markup' => t('<p>This shipping method will be available for customers purchasing from your store.</p>'),
    '#weight' => -90,
  ];
}

/**
 * Modifies promotion forms for vendors.
 */
function _stripe_connect_marketplace_modify_promotion_form(&$form, $form_state, $store) {
  // Restrict store selection to only the vendor's store
  if (isset($form['stores'])) {
    $form['stores']['#access'] = FALSE;
    $form['stores']['#default_value'] = [$store->id()];
  }
  
  // Add explanation text
  $form['vendor_promotion_message'] = [
    '#type' => 'markup',
    '#markup' => t('<p>This promotion will apply to products in your store.</p>'),
    '#weight' => -90,
  ];
  
  // Limit offer types for vendors if needed
  if (isset($form['offer']['plugin_id'])) {
    // You can restrict certain offer types if necessary
    // For example, maybe vendors shouldn't be able to offer free shipping
    /*
    $options = $form['offer']['plugin_id']['#options'];
    unset($options['order_free_shipping']);
    $form['offer']['plugin_id']['#options'] = $options;
    */
  }
  
  // Ensure compatibility with vendor's product types
  if (isset($form['conditions'])) {
    // Additional logic could be added here to ensure conditions are compatible
    // with the vendor's products
  }
}

/**
 * Modifies product and product variation forms for vendors.
 */
function _stripe_connect_marketplace_modify_product_form(&$form, $form_state, $vendor_id) {
  // Get the product entity if available
  $product_entity = NULL;
  $form_object = $form_state->getFormObject();
  if (method_exists($form_object, 'getEntity')) {
    $product_entity = $form_object->getEntity();
  }
  
  // Restrict store selection to only vendor's stores
  if (isset($form['stores']['widget'])) {
    // Get vendor's stores
    $store_query = \Drupal::entityTypeManager()->getStorage('commerce_store')->getQuery()
      ->condition('uid', $vendor_id)
      ->accessCheck(TRUE);
    $store_ids = $store_query->execute();
    
    if (!empty($store_ids)) {
      // Filter the options
      $options = $form['stores']['widget']['#options'];
      $filtered_options = ['_none' => $options['_none']]; // Keep the "none" option
      
      foreach ($options as $key => $option) {
        if ($key === '_none') {
          continue;
        }
        
        // Extract store ID from option key (format: "entity:commerce_store/1")
        $parts = explode('/', $key);
        $store_id = end($parts);
        
        if (in_array($store_id, $store_ids)) {
          $filtered_options[$key] = $option;
        }
      }
      
      $form['stores']['widget']['#options'] = $filtered_options;
      
      // If there's only one store (plus _none), select it by default for new products
      if (count($filtered_options) === 2 && !$product_entity->isNew()) {
        // Get the first real option (not _none)
        $store_keys = array_keys($filtered_options);
        $store_key = $store_keys[1]; // Index 1 because 0 is '_none'
        
        // Set default value
        $form['stores']['widget']['#default_value'] = [$store_key];
      }
    }
  }
  
  // Add vendor context to the form
  $form['vendor_product_message'] = [
    '#type' => 'markup',
    '#markup' => t('<p>This product will be available in your store.</p>'),
    '#weight' => -90,
  ];
  
  // For product variations, restrict pricing and SKU field access
  if (isset($form['price']) && isset($form['sku'])) {
    // This is likely a product variation form
    
    // Check if vendor has permission to adjust prices
    $current_user = \Drupal::currentUser();
    if (!$current_user->hasPermission('adjust own product prices')) {
      $form['price']['#access'] = FALSE;
      
      // If price is required, we need to set a default value
      if (isset($form['price']['widget'][0]['amount']['#required']) && 
          $form['price']['widget'][0]['amount']['#required']) {
        $form['price']['widget'][0]['amount']['#required'] = FALSE;
        
        // Set a default price value from configuration if this is a new variation
        if ($product_entity && $product_entity->isNew()) {
          $config = \Drupal::config('stripe_connect_marketplace.settings');
          $default_price = $config->get('default_product_price') ?: '0.00';
          
          $form['price']['widget'][0]['amount']['#default_value'] = $default_price;
        }
      }
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function stripe_connect_marketplace_entity_presave($entity) {
  // Store vendor info in Commerce entities
  $current_user = \Drupal::currentUser();
  
  // Only process for vendor users
  if (!$current_user->hasRole('vendor')) {
    return;
  }
  
  $entity_type = $entity->getEntityTypeId();
  
  // For Commerce entities, store vendor context
  $commerce_entities = [
    'commerce_payment_gateway',
    'commerce_tax_type',
    'commerce_shipping_method',
    'commerce_promotion',
  ];
  
  if (in_array($entity_type, $commerce_entities)) {
    // Store vendor ID in a field or metadata if available
    if ($entity->hasField('field_vendor_id')) {
      $entity->set('field_vendor_id', $current_user->id());
    }
    
    // Special handling for different entity types
    switch ($entity_type) {
      case 'commerce_payment_gateway':
        _stripe_connect_marketplace_handle_payment_gateway_save($entity, $current_user->id());
        break;
        
      case 'commerce_promotion':
        _stripe_connect_marketplace_handle_promotion_save($entity, $current_user->id());
        break;
    }
  }
  
  // Products and variations need special handling
  if ($entity_type === 'commerce_product' || $entity_type === 'commerce_product_variation') {
    _stripe_connect_marketplace_handle_product_save($entity, $current_user->id());
  }
}

/**
 * Handles payment gateway entity saves for vendors.
 */
function _stripe_connect_marketplace_handle_payment_gateway_save($gateway, $vendor_id) {
  // Get vendor's store
  $store = _stripe_connect_marketplace_get_vendor_store($vendor_id);
  if (!$store) {
    return;
  }
  
  // Ensure the gateway is associated with the vendor's store
  if ($store->hasField('field_payment_gateways')) {
    $gateway_values = $store->get('field_payment_gateways')->getValue();
    $gateway_ids = array_column($gateway_values, 'target_id');
    
    // Add this gateway if not already associated
    if (!in_array($gateway->id(), $gateway_ids)) {
      $gateway_values[] = ['target_id' => $gateway->id()];
      $store->set('field_payment_gateways', $gateway_values);
      $store->save();
    }
  }
}

/**
 * Handles promotion entity saves for vendors.
 */
function _stripe_connect_marketplace_handle_promotion_save($promotion, $vendor_id) {
  // Get vendor's store
  $store = _stripe_connect_marketplace_get_vendor_store($vendor_id);
  if (!$store) {
    return;
  }
  
  // Ensure the promotion is associated with the vendor's store
  $store_ids = [];
  foreach ($promotion->getStores() as $promo_store) {
    $store_ids[] = $promo_store->id();
  }
  
  if (!in_array($store->id(), $store_ids)) {
    $store_ids[] = $store->id();
    $promotion->setStoreIds($store_ids);
  }
  
  // Optionally track this in the store entity
  if ($store->hasField('field_promotions')) {
    $promotion_values = $store->get('field_promotions')->getValue();
    $promotion_ids = array_column($promotion_values, 'target_id');
    
    // Add this promotion if not already associated
    if (!in_array($promotion->id(), $promotion_ids)) {
      $promotion_values[] = ['target_id' => $promotion->id()];
      $store->set('field_promotions', $promotion_values);
      $store->save();
    }
  }
}

/**
 * Handles product and variation entity saves for vendors.
 */
function _stripe_connect_marketplace_handle_product_save($entity, $vendor_id) {
  // For products, enforce association with vendor's store(s)
  if ($entity->getEntityTypeId() === 'commerce_product') {
    $vendor_store_ids = _stripe_connect_marketplace_get_vendor_store_ids($vendor_id);
    if (empty($vendor_store_ids)) {
      return;
    }
    
    // Get current store IDs
    $current_store_ids = [];
    foreach ($entity->getStores() as $store) {
      $current_store_ids[] = $store->id();
    }
    
    // Make sure at least one of the vendor's stores is associated
    $has_vendor_store = false;
    foreach ($current_store_ids as $store_id) {
      if (in_array($store_id, $vendor_store_ids)) {
        $has_vendor_store = true;
        break;
      }
    }
    
    // If no vendor store is associated, add the first one
    if (!$has_vendor_store && !empty($vendor_store_ids)) {
      $current_store_ids[] = reset($vendor_store_ids);
      $entity->setStoreIds($current_store_ids);
    }
  }
  
  // For variations, handle any vendor-specific adjustments
  if ($entity->getEntityTypeId() === 'commerce_product_variation') {
    // Potentially set default commission rates, etc.
    if ($entity->hasField('field_vendor_commission')) {
      // Only set a default commission rate for new variations
      if ($entity->isNew() && $entity->get('field_vendor_commission')->isEmpty()) {
        // Get the default commission rate from config
        $config = \Drupal::config('stripe_connect_marketplace.settings');
        $default_commission = $config->get('default_vendor_commission') ?: 0;
        
        $entity->set('field_vendor_commission', $default_commission);
      }
    }
  }
}

/**
 * Gets a vendor's store.
 *
 * @param int $vendor_id
 *   The vendor user ID.
 *
 * @return \Drupal\commerce_store\Entity\StoreInterface|null
 *   The store entity, or NULL if not found.
 */
function _stripe_connect_marketplace_get_vendor_store($vendor_id) {
  $store_id = _stripe_connect_marketplace_get_vendor_store_id($vendor_id);
  if (!$store_id) {
    return NULL;
  }
  
  return \Drupal::entityTypeManager()->getStorage('commerce_store')->load($store_id);
}

/**
 * Gets all store IDs for a vendor.
 *
 * @param int $vendor_id
 *   The vendor user ID.
 *
 * @return array
 *   Array of store IDs.
 */
function _stripe_connect_marketplace_get_vendor_store_ids($vendor_id) {
  // Query for stores owned by the vendor
  $query = \Drupal::entityTypeManager()->getStorage('commerce_store')->getQuery()
    ->condition('uid', $vendor_id)
    ->accessCheck(TRUE)
    ->sort('created', 'DESC')
    ->range(0, 1);
  
  return $query->execute();
}

/**
 * Implements hook_toolbar().
 */
function stripe_connect_marketplace_toolbar() {
  $items = [];
  
  // Check for vendor role if this is the front-end
  $current_user = \Drupal::currentUser();
  if ($current_user->hasPermission('view stripe connect dashboard')) {
    $items['stripe_connect_vendor'] = [
      '#type' => 'toolbar_item',
      '#weight' => 999,
      'tab' => [
        '#type' => 'link',
        '#title' => t('Vendor Dashboard'),
        '#url' => Url::fromRoute('stripe_connect_marketplace.vendor_dashboard'),
        '#attributes' => [
          'title' => t('Stripe Connect Vendor Dashboard'),
          'class' => ['toolbar-icon', 'toolbar-icon-stripe-connect-vendor'],
        ],
      ],
    ];
  }
  
  // Check for admin role
  if ($current_user->hasPermission('access stripe connect admin')) {
    $items['stripe_connect_admin'] = [
      '#type' => 'toolbar_item',
      '#weight' => 999,
      'tab' => [
        '#type' => 'link',
        '#title' => t('Stripe Connect Admin'),
        '#url' => Url::fromRoute('stripe_connect_marketplace.admin_dashboard'),
        '#attributes' => [
          'title' => t('Stripe Connect Admin Dashboard'),
          'class' => ['toolbar-icon', 'toolbar-icon-stripe-connect-admin'],
        ],
      ],
    ];
  }
  
  return $items;
}

/**
 * Implements hook_cron().
 */
function stripe_connect_marketplace_cron() {
  // Verify API keys every 6 hours
  $api_key_interval = 21600; // 6 hours
  $last_key_verification = \Drupal::state()->get('stripe_connect_marketplace.last_api_verification', 0);
  
  if (time() - $last_key_verification >= $api_key_interval) {
    try {
      // Verify the API keys
      $verification_service = \Drupal::service('stripe_connect_marketplace.api_key_verification');
      $verification_service->verifyApiKeys();
      
      // Update last verification time
      \Drupal::state()->set('stripe_connect_marketplace.last_api_verification', time());
    }
    catch (\Exception $e) {
      \Drupal::logger('stripe_connect_marketplace')->error('Error during API key verification: @message', [
        '@message' => $e->getMessage(),
      ]);
    }
  }
  
  // Verify connected accounts every 12 hours (process 20 at a time)
  $account_interval = 43200; // 12 hours
  $last_account_verification = \Drupal::state()->get('stripe_connect_marketplace.last_account_verification', 0);
  
  if (time() - $last_account_verification >= $account_interval) {
    try {
      // Verify connected accounts
      $account_service = \Drupal::service('stripe_connect_marketplace.account_verification');
      $stats = $account_service->verifyVendorAccounts(20);
      
      // Log the results
      if ($stats['checked'] > 0) {
        \Drupal::logger('stripe_connect_marketplace')->info('Verified @checked vendor accounts: @updated updated, @deleted marked as deleted', [
          '@checked' => $stats['checked'],
          '@updated' => $stats['updated'],
          '@deleted' => $stats['deleted'],
        ]);
      }
      
      // Update last verification time
      \Drupal::state()->set('stripe_connect_marketplace.last_account_verification', time());
    }
    catch (\Exception $e) {
      \Drupal::logger('stripe_connect_marketplace')->error('Error during account verification: @message', [
        '@message' => $e->getMessage(),
      ]);
    }
  }
  
  // Process failed operations queue
  $queue_processor_interval = 1800; // 30 minutes
  $last_queue_processing = \Drupal::state()->get('stripe_connect_marketplace.last_queue_processing', 0);
  
  if (time() - $last_queue_processing >= $queue_processor_interval) {
    try {
      // Process the failed operations queue
      $failed_operations = \Drupal::service('stripe_connect_marketplace.failed_operations');
      $stats = $failed_operations->processQueue(10);
      
      // Log the results if anything was processed
      if ($stats['processed'] > 0) {
        \Drupal::logger('stripe_connect_marketplace')->info('Processed @processed failed operations: @succeeded succeeded, @requeued requeued, @dropped dropped', [
          '@processed' => $stats['processed'],
          '@succeeded' => $stats['succeeded'],
          '@requeued' => $stats['requeued'],
          '@dropped' => $stats['dropped'],
        ]);
      }
      
      // Update last processing time
      \Drupal::state()->set('stripe_connect_marketplace.last_queue_processing', time());
    }
    catch (\Exception $e) {
      \Drupal::logger('stripe_connect_marketplace')->error('Error processing failed operations queue: @message', [
        '@message' => $e->getMessage(),
      ]);
    }
  }
}

/**
 * Implements hook_mail().
 */
function stripe_connect_marketplace_mail($key, &$message, $params) {
  switch ($key) {
    case 'api_key_failure':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['message'];
      break;
      
    case 'account_deleted':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['message'];
      break;
      
    case 'vendor_status_change':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['message'];
      break;
  }
}

/**
 * Implements hook_entity_type_alter().
 * 
 * Alters entity types to use custom access control handlers for vendors.
 * 
 * @param array $entity_types
 *   The entity type definitions array.
 */
function stripe_connect_marketplace_entity_type_alter(array &$entity_types) {
  if (isset($entity_types['commerce_store'])) {
    $entity_types['commerce_store']->setHandlerClass('access', 'Drupal\stripe_connect_marketplace\Access\VendorStoreAccessControlHandler');
  }
  
  if (isset($entity_types['commerce_product'])) {
    $entity_types['commerce_product']->setHandlerClass('access', 'Drupal\stripe_connect_marketplace\Access\VendorProductAccessControlHandler');
  }
  
  if (isset($entity_types['commerce_order'])) {
    $entity_types['commerce_order']->setHandlerClass('access', 'Drupal\stripe_connect_marketplace\Access\VendorOrderAccessControlHandler');
  }
}

/**
 * Safe logging helper function for hooks and other non-class code.
 * 
 * @param string $message
 *   The message to log.
 * @param array $variables
 *   The variables for the message.
 * @param string $level
 *   The log level (error, warning, notice, info).
 */
function stripe_connect_marketplace_log($message, array $variables = [], $level = 'error') {
  // Use the utility class for logging if available
  if (class_exists('\Drupal\stripe_connect_marketplace\Utility\SafeLogging')) {
    SafeLogging::moduleLog($message, $variables, $level);
    return;
  }
  
  // Fallback if utility class isn't available
  $logger = \Drupal::logger('stripe_connect_marketplace');
  
  // Basic sanitization
  foreach ($variables as $key => $value) {
    if ($value === NULL) {
      $variables[$key] = '(null)';
    }
    elseif (is_object($value) && !method_exists($value, '__toString')) {
      $variables[$key] = get_class($value) . ' object';
    }
    elseif (is_array($value)) {
      $variables[$key] = 'Array';
    }
  }
  
  // Log with the appropriate level
  switch ($level) {
    case 'warning':
      $logger->warning($message, $variables);
      break;
    
    case 'notice':
      $logger->notice($message, $variables);
      break;
    
    case 'info':
      $logger->info($message, $variables);
      break;
    
    case 'error':
    default:
      $logger->error($message, $variables);
      break;
  }
}

/**
 * Implements hook_menu_links_discovered_alter().
 */
function stripe_connect_marketplace_menu_links_discovered_alter(&$links) {
  // Only process for vendors
  $user = \Drupal::currentUser();
  if (!$user->hasRole('vendor')) {
    return;
  }
  
  // Find store settings links that need dynamic store ID
  $store_setting_links = [
    'stripe_connect_marketplace.vendor_store_settings_link',
    'stripe_connect_marketplace.vendor_store_payment_gateways_link',
    'stripe_connect_marketplace.vendor_store_tax_settings_link',
    'stripe_connect_marketplace.vendor_store_shipping_methods_link',
    'stripe_connect_marketplace.vendor_store_inventory_link',
  ];
  
  foreach ($store_setting_links as $link_id) {
    if (isset($links[$link_id])) {
      // Get the vendor's store ID
      $store_id = _stripe_connect_marketplace_get_vendor_store_id($user->id());
      
      if ($store_id) {
        // Update the route parameter with the correct store ID
        $links[$link_id]['route_parameters']['store_id'] = $store_id;
      }
      else {
        // No store found, hide this link
        unset($links[$link_id]);
      }
    }
  }
}

/**
 * Access callback for vendor menu items.
 *
 * @return bool
 *   TRUE if the user should see the vendor menu items, FALSE otherwise.
 */
function _stripe_connect_marketplace_vendor_menu_access() {
  $user = \Drupal::currentUser();
  return $user->hasPermission('access vendor menu') || $user->hasPermission('view stripe connect dashboard');
}

/**
 * Implements hook_preprocess_menu().
 */
function stripe_connect_marketplace_preprocess_menu(&$variables) {
  // Handle vendor access to main menu items based on roles/permissions
  if (isset($variables['menu_name']) && $variables['menu_name'] == 'main') {
    $user = \Drupal::currentUser();
    
    // Show vendor menu items only to vendors or admins
    $is_vendor = $user->hasRole('vendor');
    $is_admin = $user->hasPermission('administer stripe connect');
    
    if (!$is_vendor && !$is_admin) {
      // Remove vendor menu items for non-vendors
      if (isset($variables['items']['stripe_connect_marketplace.vendor_menu'])) {
        unset($variables['items']['stripe_connect_marketplace.vendor_menu']);
      }
    }
  }
}

/**
 * Implements hook_toolbar_alter().
 */
function stripe_connect_marketplace_toolbar_alter(&$items) {
  // Get current user
  $user = \Drupal::currentUser();
  
  // Add a vendor dashboard link to the toolbar for vendors
  if ($user->hasRole('vendor') && $user->hasPermission('view stripe connect dashboard')) {
    $items['vendor_dashboard'] = [
      '#type' => 'toolbar_item',
      '#weight' => 999,
      'tab' => [
        '#type' => 'link',
        '#title' => t('Vendor Dashboard'),
        '#url' => \Drupal\Core\Url::fromRoute('stripe_connect_marketplace.vendor_dashboard'),
        '#attributes' => [
          'title' => t('Stripe Connect Vendor Dashboard'),
          'class' => ['toolbar-icon', 'toolbar-icon-stripe-connect-vendor'],
        ],
      ],
    ];
  }
}

/**
 * Implements hook_theme().
 * 
 * This adds a custom container for vendor navigation.
 */
function stripe_connect_marketplace_theme_registry_alter(&$theme_registry) {
  // Add a preprocess function for page to add vendor sidebar
  if (isset($theme_registry['page'])) {
    $theme_registry['page']['preprocess functions'][] = 'stripe_connect_marketplace_preprocess_page';
  }
}

/**
 * Implements template_preprocess_page().
 */
function stripe_connect_marketplace_preprocess_page(&$variables) {
  $user = \Drupal::currentUser();
  
  // Add vendor sidebar for vendors
  if ($user->hasRole('vendor')) {
    $variables['vendor_sidebar'] = [
      '#theme' => 'item_list',
      '#title' => t('Vendor Menu'),
      '#items' => [
        [
          '#type' => 'link',
          '#title' => t('Dashboard'),
          '#url' => \Drupal\Core\Url::fromRoute('stripe_connect_marketplace.vendor_dashboard'),
          '#attributes' => ['class' => ['vendor-nav-item', 'vendor-dashboard']],
        ],
        [
          '#type' => 'link',
          '#title' => t('Stripe Dashboard'),
          '#url' => \Drupal\Core\Url::fromRoute('stripe_connect_marketplace.stripe_dashboard_redirect'),
          '#attributes' => [
            'class' => ['vendor-nav-item', 'stripe-dashboard'],
            'target' => '_blank',
          ],
        ],
        [
          '#type' => 'link',
          '#title' => t('My Stores'),
          '#url' => \Drupal\Core\Url::fromRoute('entity.commerce_store.collection'),
          '#attributes' => ['class' => ['vendor-nav-item', 'vendor-stores']],
        ],
        [
          '#type' => 'link',
          '#title' => t('My Products'),
          '#url' => \Drupal\Core\Url::fromRoute('entity.commerce_product.collection'),
          '#attributes' => ['class' => ['vendor-nav-item', 'vendor-products']],
        ],
        [
          '#type' => 'link',
          '#title' => t('My Orders'),
          '#url' => \Drupal\Core\Url::fromRoute('entity.commerce_order.collection'),
          '#attributes' => ['class' => ['vendor-nav-item', 'vendor-orders']],
        ],
      ],
      '#attributes' => ['class' => ['vendor-sidebar-nav']],
    ];
    
    // Attach vendor sidebar CSS
    $variables['#attached']['library'][] = 'stripe_connect_marketplace/vendor_sidebar';
  }
}

/**
 * Implements hook_page_attachments().
 */
function stripe_connect_marketplace_page_attachments(array &$attachments) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  
  // Only attach to vendor dashboard routes
  if (strpos($route_name, 'stripe_connect_marketplace.vendor') === 0) {
    $attachments['#attached']['library'][] = 'stripe_connect_marketplace/vendor_dashboard';
  }
}

/**
 * Implements hook_menu_alter().
 */
function stripe_connect_marketplace_menu_alter(&$items) {
  // Override access callbacks for store-related routes to allow vendor access
  if (isset($items['entity.commerce_store.collection'])) {
    $items['entity.commerce_store.collection']['access callback'] = '_stripe_connect_marketplace_vendor_store_collection_access';
    $items['entity.commerce_store.collection']['access arguments'] = ['view own commerce_store'];
  }
  
  // Override store edit route access
  if (isset($items['entity.commerce_store.edit_form'])) {
    $items['entity.commerce_store.edit_form']['access callback'] = '_stripe_connect_marketplace_vendor_store_entity_access';
    $items['entity.commerce_store.edit_form']['access arguments'] = [1, 'update'];
  }
  
  // Override product-related route access
  if (isset($items['entity.commerce_product.collection'])) {
    $items['entity.commerce_product.collection']['access callback'] = '_stripe_connect_marketplace_vendor_product_collection_access';
    $items['entity.commerce_product.collection']['access arguments'] = ['view own commerce_product'];
  }
  
  // Override product edit route access
  if (isset($items['entity.commerce_product.edit_form'])) {
    $items['entity.commerce_product.edit_form']['access callback'] = '_stripe_connect_marketplace_vendor_product_entity_access';
    $items['entity.commerce_product.edit_form']['access arguments'] = [1, 'update'];
  }
  
  // Override order collection route access
  if (isset($items['entity.commerce_order.collection'])) {
    $items['entity.commerce_order.collection']['access callback'] = '_stripe_connect_marketplace_vendor_order_collection_access';
    $items['entity.commerce_order.collection']['access arguments'] = ['view own commerce_order'];
  }
  
  // Allow vendor access to add store form
  if (isset($items['entity.commerce_store.add_form'])) {
    $items['entity.commerce_store.add_form']['access callback'] = '_stripe_connect_marketplace_vendor_add_store_access';
  }
  
  // Allow vendor access to add product form
  if (isset($items['entity.commerce_product.add_form'])) {
    $items['entity.commerce_product.add_form']['access callback'] = '_stripe_connect_marketplace_vendor_add_product_access';
  }
}

/**
 * Access callback for vendor store collection.
 */
function _stripe_connect_marketplace_vendor_store_collection_access($permission = NULL) {
  $account = \Drupal::currentUser();
  
  // Allow access for admins
  if ($account->hasPermission('administer commerce_store')) {
    return TRUE;
  }
  
  // Allow access for vendors with appropriate permission
  if ($account->hasRole('vendor') && ($permission === NULL || $account->hasPermission($permission))) {
    return TRUE;
  }
  
  return FALSE;
}

/**
 * Access callback for vendor store entity operations.
 */
function _stripe_connect_marketplace_vendor_store_entity_access($store, $operation = 'view') {
  $account = \Drupal::currentUser();
  
  // Allow access for admins
  if ($account->hasPermission('administer commerce_store')) {
    return TRUE;
  }
  
  // Allow access for vendor if they own the store
  if ($account->hasRole('vendor') && $account->hasPermission($operation . ' own commerce_store')) {
    return $store->getOwnerId() == $account->id();
  }
  
  return FALSE;
}

/**
 * Access callback for vendor product collection.
 */
function _stripe_connect_marketplace_vendor_product_collection_access($permission = NULL) {
  $account = \Drupal::currentUser();
  
  // Allow access for admins
  if ($account->hasPermission('administer commerce_product')) {
    return TRUE;
  }
  
  // Allow access for vendors with appropriate permission
  if ($account->hasRole('vendor') && ($permission === NULL || $account->hasPermission($permission))) {
    return TRUE;
  }
  
  return FALSE;
}

/**
 * Access callback for vendor product entity operations.
 */
function _stripe_connect_marketplace_vendor_product_entity_access($product, $operation = 'view') {
  $account = \Drupal::currentUser();
  
  // Allow access for admins
  if ($account->hasPermission('administer commerce_product')) {
    return TRUE;
  }
  
  // For vendors, check if the product belongs to any of their stores
  if ($account->hasRole('vendor') && $account->hasPermission($operation . ' own commerce_product')) {
    $vendor_access = \Drupal::service('stripe_connect_marketplace.vendor_access');
    $user_store_ids = $vendor_access->getUserStoreIds($account->id());
    
    foreach ($product->getStores() as $store) {
      if (in_array($store->id(), $user_store_ids)) {
        return TRUE;
      }
    }
  }
  
  return FALSE;
}

/**
 * Access callback for vendor order collection.
 */
function _stripe_connect_marketplace_vendor_order_collection_access($permission = NULL) {
  $account = \Drupal::currentUser();
  
  // Allow access for admins
  if ($account->hasPermission('administer commerce_order')) {
    return TRUE;
  }
  
  // Allow access for vendors with appropriate permission
  if ($account->hasRole('vendor') && ($permission === NULL || $account->hasPermission($permission))) {
    return TRUE;
  }
  
  return FALSE;
}

/**
 * Access callback for vendor add store form.
 */
function _stripe_connect_marketplace_vendor_add_store_access() {
  $account = \Drupal::currentUser();
  
  // Allow access for admins
  if ($account->hasPermission('administer commerce_store')) {
    return TRUE;
  }
  
  // Allow access for vendors with create permission
  if ($account->hasRole('vendor') && $account->hasPermission('create commerce_store')) {
    return TRUE;
  }
  
  return FALSE;
}

/**
 * Access callback for vendor add product form.
 */
function _stripe_connect_marketplace_vendor_add_product_access() {
  $account = \Drupal::currentUser();
  
  // Allow access for admins
  if ($account->hasPermission('administer commerce_product')) {
    return TRUE;
  }
  
  // Allow access for vendors with create permission
  if ($account->hasRole('vendor') && $account->hasPermission('create commerce_product')) {
    // Check if vendor has at least one store
    $vendor_access = \Drupal::service('stripe_connect_marketplace.vendor_access');
    $user_store_ids = $vendor_access->getUserStoreIds($account->id());
    
    if (count($user_store_ids) > 0) {
      return TRUE;
    }
  }
  
  return FALSE;
}
